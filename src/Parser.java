
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import syntax.*;
import syntax.statement.*;
import syntax.statement.WriteOps.*;
import syntax.type.*;
import java.util.LinkedList;
import syntax.expr.*;
import syntax.expr.binaryexpr.arithop.*;
import syntax.expr.binaryexpr.relop.*;
import syntax.expr.binaryexpr.stringop.StringConcatOp;
import syntax.expr.unaryexpr.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\010\010\000\002\005\002" +
    "\000\002\005\004\000\002\004\005\000\002\004\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\007\000\002\013\005\000\002\013\007" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\006\016\000\002\006\014\000\002" +
    "\015\002\000\002\015\003\000\002\016\003\000\002\016" +
    "\005\000\002\017\004\000\002\017\005\000\002\020\002" +
    "\000\002\020\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\003\000\002" +
    "\021\004\000\002\021\004\000\002\021\005\000\002\022" +
    "\012\000\002\023\002\000\002\023\005\000\002\024\011" +
    "\000\002\025\013\000\002\026\010\000\002\027\002\000" +
    "\002\027\005\000\002\027\004\000\002\030\005\000\002" +
    "\030\004\000\002\012\003\000\002\012\005\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\032\005\000\002\033\006\000\002\033\005\000" +
    "\002\035\003\000\002\035\005\000\002\035\004\000\002" +
    "\035\006\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\004\000" +
    "\002\036\004\000\002\036\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\020\004\uffff\006\uffff\014\uffff\015\uffff\016" +
    "\uffff\017\uffff\020\uffff\001\002\000\004\002\302\001\002" +
    "\000\020\004\ufffc\006\007\014\006\015\013\016\010\017" +
    "\014\020\ufffc\001\002\000\042\005\ufff8\006\ufff8\007\ufff8" +
    "\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8\022" +
    "\ufff8\030\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\001\002\000\004\005\265\001\002\000\042\005\ufff5\006" +
    "\ufff5\007\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\021\ufff5\022\ufff5\030\ufff5\060\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\001\002\000\004\005\254\001\002\000\050" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\012\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\030\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\001" +
    "\002\000\042\005\ufff6\006\ufff6\007\ufff6\012\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\021\ufff6\022\ufff6\030\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\001\002\000\042" +
    "\005\ufff7\006\ufff7\007\ufff7\012\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\021\ufff7\022\ufff7\030\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\064\ufff7\001\002\000\006\004\016\020" +
    "\021\001\002\000\042\005\uffff\006\uffff\007\uffff\012\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff\022\uffff\030" +
    "\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\001\002" +
    "\000\004\002\001\001\002\000\006\004\ufffb\020\ufffb\001" +
    "\002\000\004\005\022\001\002\000\004\032\023\001\002" +
    "\000\016\014\006\015\013\016\010\017\014\024\030\033" +
    "\uffe8\001\002\000\004\005\246\001\002\000\004\033\035" +
    "\001\002\000\006\033\uffe6\034\uffe6\001\002\000\006\033" +
    "\uffe7\034\033\001\002\000\012\014\006\015\013\016\010" +
    "\017\014\001\002\000\004\005\032\001\002\000\006\033" +
    "\uffe3\034\uffe3\001\002\000\014\014\006\015\013\016\010" +
    "\017\014\024\030\001\002\000\006\033\uffe5\034\uffe5\001" +
    "\002\000\044\005\uffff\006\uffff\007\uffff\012\uffff\014\uffff" +
    "\015\uffff\016\uffff\017\uffff\021\uffff\022\uffff\030\uffff\036" +
    "\037\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\001\002" +
    "\000\042\005\uffe2\006\007\007\uffe2\012\uffe2\014\006\015" +
    "\013\016\010\017\014\021\uffe2\022\uffe2\030\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002\000\012\014" +
    "\006\015\013\016\010\017\014\001\002\000\042\005\uffff" +
    "\006\uffff\007\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\021\uffff\022\uffff\030\uffff\060\uffff\061\uffff\062\uffff" +
    "\063\uffff\064\uffff\001\002\000\042\005\uffe2\006\007\007" +
    "\uffe2\012\uffe2\014\006\015\013\016\010\017\014\021\uffe2" +
    "\022\uffe2\030\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\001\002\000\030\005\057\007\055\012\051\021\053" +
    "\022\054\030\062\060\045\061\056\062\052\063\061\064" +
    "\050\001\002\000\034\005\uffdc\007\uffdc\011\uffdc\012\uffdc" +
    "\021\uffdc\022\uffdc\027\uffdc\030\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\063\uffdc\064\uffdc\001\002\000\004\035\241\001\002" +
    "\000\004\005\234\001\002\000\034\005\uffe1\007\uffe1\011" +
    "\uffe1\012\uffe1\021\uffe1\022\uffe1\027\uffe1\030\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\001\002\000\004\035" +
    "\233\001\002\000\022\005\112\032\107\050\113\052\102" +
    "\070\105\071\111\072\110\073\103\001\002\000\022\005" +
    "\112\032\107\050\113\052\102\070\105\071\111\072\110" +
    "\073\103\001\002\000\022\005\112\032\107\050\113\052" +
    "\102\070\105\071\111\072\110\073\103\001\002\000\004" +
    "\020\221\001\002\000\022\005\112\032\107\050\113\052" +
    "\102\070\105\071\111\072\110\073\103\001\002\000\022" +
    "\005\112\032\107\050\113\052\102\070\105\071\111\072" +
    "\110\073\103\001\002\000\022\005\112\032\107\050\113" +
    "\052\102\070\105\071\111\072\110\073\103\001\002\000" +
    "\006\032\153\045\176\001\002\000\004\035\203\001\002" +
    "\000\022\005\112\032\107\050\113\052\102\070\105\071" +
    "\111\072\110\073\103\001\002\000\004\032\071\001\002" +
    "\000\004\035\070\001\002\000\004\035\067\001\002\000" +
    "\004\035\066\001\002\000\034\005\uffe0\007\uffe0\011\uffe0" +
    "\012\uffe0\021\uffe0\022\uffe0\027\uffe0\030\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\001\002\000\034\005\uffdd" +
    "\007\uffdd\011\uffdd\012\uffdd\021\uffdd\022\uffdd\027\uffdd\030" +
    "\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\001\002" +
    "\000\034\005\uffdf\007\uffdf\011\uffdf\012\uffdf\021\uffdf\022" +
    "\uffdf\027\uffdf\030\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\001\002\000\014\006\007\014\006\015\013\016" +
    "\010\017\014\001\002\000\004\033\073\001\002\000\004" +
    "\026\074\001\002\000\030\005\uffe2\007\uffe2\012\uffe2\022" +
    "\uffe2\027\uffe2\030\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\001\002\000\030\005\057\007\055\012\051\022" +
    "\054\027\076\030\062\060\045\061\056\062\052\063\061" +
    "\064\050\001\002\000\004\031\100\001\002\000\004\035" +
    "\201\001\002\000\004\032\101\001\002\000\022\005\112" +
    "\032\107\050\113\052\102\070\105\071\111\072\110\073" +
    "\103\001\002\000\022\005\112\032\107\050\113\052\102" +
    "\070\105\071\111\072\110\073\103\001\002\000\054\005" +
    "\uffbe\010\uffbe\013\uffbe\033\uffbe\034\uffbe\035\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\047" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\001\002\000\042\035\170\037\131\040\123\041" +
    "\121\042\130\043\125\044\120\046\116\047\132\051\122" +
    "\052\115\053\126\054\133\055\124\056\117\057\127\001" +
    "\002\000\054\005\uffbd\010\uffbd\013\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\001\002\000\054\005\uffbb\010" +
    "\uffbb\013\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\001\002\000\022\005\112\032\107\050\113\052\102\070" +
    "\105\071\111\072\110\073\103\001\002\000\054\005\uffc0" +
    "\010\uffc0\013\uffc0\033\uffc0\034\uffc0\035\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\046\uffc0\047\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\001\002\000\054\005\uffbf\010\uffbf\013\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\001\002\000\056\005" +
    "\uffbc\010\uffbc\013\uffbc\032\153\033\uffbc\034\uffbc\035\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046" +
    "\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\001\002\000\022\005\112\032\107\050" +
    "\113\052\102\070\105\071\111\072\110\073\103\001\002" +
    "\000\054\005\uffaa\010\uffaa\013\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\037\131\040\123\041\121\042\130\043\125\044\120" +
    "\046\uffaa\047\uffaa\051\122\052\115\053\126\054\133\055" +
    "\124\056\117\057\127\001\002\000\022\005\112\032\107" +
    "\050\113\052\102\070\105\071\111\072\110\073\103\001" +
    "\002\000\022\005\112\032\107\050\113\052\102\070\105" +
    "\071\111\072\110\073\103\001\002\000\022\005\112\032" +
    "\107\050\113\052\102\070\105\071\111\072\110\073\103" +
    "\001\002\000\022\005\112\032\107\050\113\052\102\070" +
    "\105\071\111\072\110\073\103\001\002\000\022\005\112" +
    "\032\107\050\113\052\102\070\105\071\111\072\110\073" +
    "\103\001\002\000\022\005\112\032\107\050\113\052\102" +
    "\070\105\071\111\072\110\073\103\001\002\000\022\005" +
    "\112\032\107\050\113\052\102\070\105\071\111\072\110" +
    "\073\103\001\002\000\022\005\112\032\107\050\113\052" +
    "\102\070\105\071\111\072\110\073\103\001\002\000\022" +
    "\005\112\032\107\050\113\052\102\070\105\071\111\072" +
    "\110\073\103\001\002\000\022\005\112\032\107\050\113" +
    "\052\102\070\105\071\111\072\110\073\103\001\002\000" +
    "\022\005\112\032\107\050\113\052\102\070\105\071\111" +
    "\072\110\073\103\001\002\000\022\005\112\032\107\050" +
    "\113\052\102\070\105\071\111\072\110\073\103\001\002" +
    "\000\022\005\112\032\107\050\113\052\102\070\105\071" +
    "\111\072\110\073\103\001\002\000\022\005\112\032\107" +
    "\050\113\052\102\070\105\071\111\072\110\073\103\001" +
    "\002\000\022\005\112\032\107\050\113\052\102\070\105" +
    "\071\111\072\110\073\103\001\002\000\054\005\uffb6\010" +
    "\uffb6\013\uffb6\033\uffb6\034\uffb6\035\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\046\uffb6\047\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\117\057\uffb6" +
    "\001\002\000\054\005\uffb2\010\uffb2\013\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\037\131\040\123\041\121\042\130\043\125" +
    "\044\120\046\116\047\uffb2\051\122\052\115\053\126\054" +
    "\133\055\124\056\117\057\127\001\002\000\054\005\uffaf" +
    "\010\uffaf\013\uffaf\033\uffaf\034\uffaf\035\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\046\uffaf\047\uffaf" +
    "\051\122\052\115\053\126\054\133\055\124\056\117\057" +
    "\127\001\002\000\054\005\uffac\010\uffac\013\uffac\033\uffac" +
    "\034\uffac\035\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\046\uffac\047\uffac\051\122\052\115\053\126" +
    "\054\133\055\124\056\117\057\127\001\002\000\054\005" +
    "\uffb3\010\uffb3\013\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046\uffb3\047" +
    "\uffb3\051\122\052\115\053\126\054\133\055\124\056\117" +
    "\057\uffb3\001\002\000\054\005\uffb8\010\uffb8\013\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\117\057\uffb8\001\002\000\054" +
    "\005\uffb1\010\uffb1\013\uffb1\033\uffb1\034\uffb1\035\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\046\uffb1" +
    "\047\uffb1\051\122\052\115\053\126\054\133\055\124\056" +
    "\117\057\127\001\002\000\054\005\uffb7\010\uffb7\013\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\046\uffb7\047\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\117\057\uffb7\001\002\000" +
    "\054\005\uffae\010\uffae\013\uffae\033\uffae\034\uffae\035\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\046" +
    "\uffae\047\uffae\051\122\052\115\053\126\054\133\055\124" +
    "\056\117\057\127\001\002\000\054\005\uffba\010\uffba\013" +
    "\uffba\033\uffba\034\uffba\035\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\046\uffba\047\uffba\051\uffba\052" +
    "\uffba\053\126\054\133\055\124\056\117\057\uffba\001\002" +
    "\000\054\005\uffad\010\uffad\013\uffad\033\uffad\034\uffad\035" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\046\uffad\047\uffad\051\122\052\115\053\126\054\133\055" +
    "\124\056\117\057\127\001\002\000\054\005\uffb0\010\uffb0" +
    "\013\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\046\uffb0\047\uffb0\051\122" +
    "\052\115\053\126\054\133\055\124\056\117\057\127\001" +
    "\002\000\054\005\uffb4\010\uffb4\013\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\117\057\uffb4\001\002\000\054\005\uffb5\010" +
    "\uffb5\013\uffb5\033\uffb5\034\uffb5\035\uffb5\037\131\040\123" +
    "\041\121\042\130\043\125\044\120\046\uffb5\047\uffb5\051" +
    "\122\052\115\053\126\054\133\055\124\056\117\057\127" +
    "\001\002\000\054\005\uffb9\010\uffb9\013\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053\126\054" +
    "\133\055\124\056\117\057\uffb9\001\002\000\026\005\112" +
    "\023\155\032\107\033\157\050\113\052\102\070\105\071" +
    "\111\072\110\073\103\001\002\000\044\033\uffc4\034\uffc4" +
    "\037\131\040\123\041\121\042\130\043\125\044\120\046" +
    "\116\047\132\051\122\052\115\053\126\054\133\055\124" +
    "\056\117\057\127\001\002\000\004\005\165\001\002\000" +
    "\006\033\161\034\160\001\002\000\054\005\uffc5\010\uffc5" +
    "\013\uffc5\033\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5\047\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\001" +
    "\002\000\024\005\112\023\163\032\107\050\113\052\102" +
    "\070\105\071\111\072\110\073\103\001\002\000\054\005" +
    "\uffc6\010\uffc6\013\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\046\uffc6\047" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\001\002\000\044\033\uffc3\034\uffc3\037\131\040" +
    "\123\041\121\042\130\043\125\044\120\046\116\047\132" +
    "\051\122\052\115\053\126\054\133\055\124\056\117\057" +
    "\127\001\002\000\004\005\164\001\002\000\006\033\uffc1" +
    "\034\uffc1\001\002\000\006\033\uffc2\034\uffc2\001\002\000" +
    "\042\033\167\037\131\040\123\041\121\042\130\043\125" +
    "\044\120\046\116\047\132\051\122\052\115\053\126\054" +
    "\133\055\124\056\117\057\127\001\002\000\054\005\uffa9" +
    "\010\uffa9\013\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\046\uffa9\047\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057" +
    "\uffa9\001\002\000\006\005\uffd2\033\uffd2\001\002\000\006" +
    "\005\172\033\174\001\002\000\004\045\176\001\002\000" +
    "\010\005\uffd0\033\uffd0\034\175\001\002\000\004\035\uffd3" +
    "\001\002\000\006\005\uffd1\033\uffd1\001\002\000\022\005" +
    "\112\032\107\050\113\052\102\070\105\071\111\072\110" +
    "\073\103\001\002\000\050\005\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\037\131\040\123\041\121\042\130\043\125\044\120" +
    "\046\116\047\132\051\122\052\115\053\126\054\133\055" +
    "\124\056\117\057\127\001\002\000\054\005\uffab\010\uffab" +
    "\013\uffab\033\uffab\034\uffab\035\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\046\uffab\047\uffab\051\uffab" +
    "\052\uffab\053\126\054\133\055\124\056\117\057\uffab\001" +
    "\002\000\034\005\uffd4\007\uffd4\011\uffd4\012\uffd4\021\uffd4" +
    "\022\uffd4\027\uffd4\030\uffd4\060\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\064\uffd4\001\002\000\042\035\uffc8\037\131\040\123" +
    "\041\121\042\130\043\125\044\120\046\116\047\132\051" +
    "\122\052\115\053\126\054\133\055\124\056\117\057\127" +
    "\001\002\000\034\005\uffda\007\uffda\011\uffda\012\uffda\021" +
    "\uffda\022\uffda\027\uffda\030\uffda\060\uffda\061\uffda\062\uffda" +
    "\063\uffda\064\uffda\001\002\000\042\035\uffcb\037\131\040" +
    "\123\041\121\042\130\043\125\044\120\046\116\047\132" +
    "\051\122\052\115\053\126\054\133\055\124\056\117\057" +
    "\127\001\002\000\042\010\206\037\131\040\123\041\121" +
    "\042\130\043\125\044\120\046\116\047\132\051\122\052" +
    "\115\053\126\054\133\055\124\056\117\057\127\001\002" +
    "\000\044\005\uffff\006\uffff\007\uffff\011\uffff\012\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\021\uffff\022\uffff\030\uffff" +
    "\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\001\002\000" +
    "\044\005\uffe2\006\007\007\uffe2\011\uffe2\012\uffe2\014\006" +
    "\015\013\016\010\017\014\021\uffe2\022\uffe2\030\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002\000\032" +
    "\005\057\007\055\011\212\012\051\021\uffd7\022\054\030" +
    "\062\060\045\061\056\062\052\063\061\064\050\001\002" +
    "\000\004\021\215\001\002\000\042\005\uffff\006\uffff\007" +
    "\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff" +
    "\022\uffff\030\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064" +
    "\uffff\001\002\000\042\005\uffe2\006\007\007\uffe2\012\uffe2" +
    "\014\006\015\013\016\010\017\014\021\uffe2\022\uffe2\030" +
    "\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002" +
    "\000\030\005\057\007\055\012\051\021\uffd6\022\054\030" +
    "\062\060\045\061\056\062\052\063\061\064\050\001\002" +
    "\000\004\007\216\001\002\000\004\035\uffd8\001\002\000" +
    "\042\035\220\037\131\040\123\041\121\042\130\043\125" +
    "\044\120\046\116\047\132\051\122\052\115\053\126\054" +
    "\133\055\124\056\117\057\127\001\002\000\034\005\uffd9" +
    "\007\uffd9\011\uffd9\012\uffd9\021\uffd9\022\uffd9\027\uffd9\030" +
    "\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\001\002" +
    "\000\004\035\222\001\002\000\006\004\uffea\020\uffea\001" +
    "\002\000\042\035\uffca\037\131\040\123\041\121\042\130" +
    "\043\125\044\120\046\116\047\132\051\122\052\115\053" +
    "\126\054\133\055\124\056\117\057\127\001\002\000\042" +
    "\013\225\037\131\040\123\041\121\042\130\043\125\044" +
    "\120\046\116\047\132\051\122\052\115\053\126\054\133" +
    "\055\124\056\117\057\127\001\002\000\042\005\uffff\006" +
    "\uffff\007\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\021\uffff\022\uffff\030\uffff\060\uffff\061\uffff\062\uffff\063" +
    "\uffff\064\uffff\001\002\000\042\005\uffe2\006\007\007\uffe2" +
    "\012\uffe2\014\006\015\013\016\010\017\014\021\uffe2\022" +
    "\uffe2\030\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2" +
    "\001\002\000\030\005\057\007\055\012\051\021\230\022" +
    "\054\030\062\060\045\061\056\062\052\063\061\064\050" +
    "\001\002\000\004\013\231\001\002\000\004\035\uffd5\001" +
    "\002\000\042\035\uffc9\037\131\040\123\041\121\042\130" +
    "\043\125\044\120\046\116\047\132\051\122\052\115\053" +
    "\126\054\133\055\124\056\117\057\127\001\002\000\034" +
    "\005\uffdb\007\uffdb\011\uffdb\012\uffdb\021\uffdb\022\uffdb\027" +
    "\uffdb\030\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\001\002\000\026\005\uffcd\032\uffcd\034\uffcd\035\uffcd\050" +
    "\uffcd\052\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\001\002" +
    "\000\026\005\112\032\107\034\237\035\uffce\050\113\052" +
    "\102\070\105\071\111\072\110\073\103\001\002\000\042" +
    "\035\uffcf\037\131\040\123\041\121\042\130\043\125\044" +
    "\120\046\116\047\132\051\122\052\115\053\126\054\133" +
    "\055\124\056\117\057\127\001\002\000\004\005\240\001" +
    "\002\000\026\005\uffcc\032\uffcc\034\uffcc\035\uffcc\050\uffcc" +
    "\052\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\001\002\000" +
    "\034\005\uffde\007\uffde\011\uffde\012\uffde\021\uffde\022\uffde" +
    "\027\uffde\030\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\001\002\000\030\005\057\007\055\012\051\021\243" +
    "\022\054\030\062\060\045\061\056\062\052\063\061\064" +
    "\050\001\002\000\004\020\244\001\002\000\004\035\245" +
    "\001\002\000\006\004\uffe9\020\uffe9\001\002\000\006\033" +
    "\uffe4\034\uffe4\001\002\000\042\005\uffe2\006\007\007\uffe2" +
    "\012\uffe2\014\006\015\013\016\010\017\014\021\uffe2\022" +
    "\uffe2\030\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2" +
    "\001\002\000\030\005\057\007\055\012\051\021\251\022" +
    "\054\030\062\060\045\061\056\062\052\063\061\064\050" +
    "\001\002\000\004\004\252\001\002\000\004\035\253\001" +
    "\002\000\004\002\ufffd\001\002\000\010\034\ufff4\035\ufff4" +
    "\045\263\001\002\000\006\034\256\035\257\001\002\000" +
    "\004\005\260\001\002\000\052\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\030\ufffa\033\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\064\ufffa\001\002\000\010\034" +
    "\ufff3\035\ufff3\045\261\001\002\000\022\005\112\032\107" +
    "\050\113\052\102\070\105\071\111\072\110\073\103\001" +
    "\002\000\044\034\ufff1\035\ufff1\037\131\040\123\041\121" +
    "\042\130\043\125\044\120\046\116\047\132\051\122\052" +
    "\115\053\126\054\133\055\124\056\117\057\127\001\002" +
    "\000\022\005\112\032\107\050\113\052\102\070\105\071" +
    "\111\072\110\073\103\001\002\000\044\034\ufff2\035\ufff2" +
    "\037\131\040\123\041\121\042\130\043\125\044\120\046" +
    "\116\047\132\051\122\052\115\053\126\054\133\055\124" +
    "\056\117\057\127\001\002\000\004\045\300\001\002\000" +
    "\006\034\267\035\270\001\002\000\004\005\271\001\002" +
    "\000\052\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\030\ufff9\033\ufff9\060\ufff9\061\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\001\002\000\004\045\272\001\002\000\012" +
    "\070\273\071\274\072\275\073\276\001\002\000\006\034" +
    "\uffeb\035\uffeb\001\002\000\006\034\uffee\035\uffee\001\002" +
    "\000\006\034\uffec\035\uffec\001\002\000\006\034\uffed\035" +
    "\uffed\001\002\000\006\034\uffef\035\uffef\001\002\000\012" +
    "\070\273\071\274\072\275\073\276\001\002\000\006\034" +
    "\ufff0\035\ufff0\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\004\011\005\014\007\010\001\001\000\002" +
    "\001\001\000\004\013\265\001\001\000\002\001\001\000" +
    "\004\011\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\017\010\016\001\001\000" +
    "\004\003\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\023\015" +
    "\024\016\026\017\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\023\017\033\001\001\000\002\001\001\000\004\003" +
    "\035\001\001\000\010\004\011\007\010\020\241\001\001" +
    "\000\004\007\037\001\001\000\004\003\040\001\001\000" +
    "\010\004\011\007\010\020\041\001\001\000\022\021\045" +
    "\022\064\024\062\025\042\030\043\031\063\032\046\033" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\105\036\231\001\001\000\006\033\105\036\223" +
    "\001\001\000\006\033\105\036\222\001\001\000\002\001" +
    "\001\000\006\033\105\036\216\001\001\000\006\033\105" +
    "\036\204\001\001\000\006\033\105\036\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\105\036\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\071\007\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\074\001\001" +
    "\000\022\021\045\022\064\024\062\025\042\030\043\031" +
    "\063\032\046\033\057\001\001\000\004\026\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\105\036" +
    "\103\001\001\000\006\033\105\036\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\105\036\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\105\036" +
    "\113\001\001\000\002\001\001\000\006\033\105\036\151" +
    "\001\001\000\006\033\105\036\150\001\001\000\006\033" +
    "\105\036\147\001\001\000\006\033\105\036\146\001\001" +
    "\000\006\033\105\036\145\001\001\000\006\033\105\036" +
    "\144\001\001\000\006\033\105\036\143\001\001\000\006" +
    "\033\105\036\142\001\001\000\006\033\105\036\141\001" +
    "\001\000\006\033\105\036\140\001\001\000\006\033\105" +
    "\036\137\001\001\000\006\033\105\036\136\001\001\000" +
    "\006\033\105\036\135\001\001\000\006\033\105\036\134" +
    "\001\001\000\006\033\105\036\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\105\035\155\036\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\105\036\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\170\001\001\000\004\032\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\105\036\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\206\001\001\000\010\004\011\007\010" +
    "\020\207\001\001\000\024\021\045\022\064\023\210\024" +
    "\062\025\042\030\043\031\063\032\046\033\057\001\001" +
    "\000\002\001\001\000\004\003\212\001\001\000\010\004" +
    "\011\007\010\020\213\001\001\000\022\021\045\022\064" +
    "\024\062\025\042\030\043\031\063\032\046\033\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\225\001\001" +
    "\000\010\004\011\007\010\020\226\001\001\000\022\021" +
    "\045\022\064\024\062\025\042\030\043\031\063\032\046" +
    "\033\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\105\036\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\045" +
    "\022\064\024\062\025\042\030\043\031\063\032\046\033" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\011\007\010\020" +
    "\247\001\001\000\022\021\045\022\064\024\062\025\042" +
    "\030\043\031\063\032\046\033\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\105\036\261\001\001\000\002" +
    "\001\001\000\006\033\105\036\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\300\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void report_error(String msg, Object info) {
  Symbol sym = (Symbol)info;
  System.out.println(msg + ": " + symbl_name_from_id(sym.sym));
}

public void syntax_error(Symbol cur_token) {
  System.out.println("Syntax error: " + symbl_name_from_id(cur_token.sym));
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              Program RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Fun> funList = (LinkedList<Fun>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Program(varDeclListleft, varDeclListright, varDeclList, funList, main); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		RESULT = new LinkedList<VarDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDeclList VarDecl 
            {
              LinkedList<VarDecl> RESULT =null;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDecl> parDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl parDecl = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parDeclList.add(parDecl); RESULT = parDeclList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              Main RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new Main(mleft, mright,  varDeclList, statList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= 
            {
              LinkedList<Fun> RESULT =null;
		RESULT = new LinkedList<Fun>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= FunList Fun 
            {
              LinkedList<Fun> RESULT =null;
		int flistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Fun> flist = (LinkedList<Fun>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Fun f = (Fun)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		flist.add(f); RESULT = flist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<IdInitOp> idListInit = (LinkedList<IdInitOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarDecl(tleft, tright, t, idListInit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              VarDecl RESULT =null;
		int idListInitObblleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListInitObblright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<IdInitObblOp> idListInitObbl = (LinkedList<IdInitObblOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarDecl(idListInitObblleft,idListInitObblright,true,idListInitObbl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INTEGER 
            {
              Type RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(itleft,itright,"INTEGER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              Type RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(btleft,btright,"BOOL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= REAL 
            {
              Type RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(rtleft,rtright,"REAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(stleft,stright,"STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID 
            {
              LinkedList<IdInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<IdInitOp> idInitOpList = new LinkedList<IdInitOp>(); idInitOpList.add(new IdInitOp(idleft,idright, new Id(idleft, idright, id))); RESULT = idInitOpList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID 
            {
              LinkedList<IdInitOp> RESULT =null;
		int idInitOpListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idInitOpListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<IdInitOp> idInitOpList = (LinkedList<IdInitOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		idInitOpList.add(new IdInitOp(idleft,idright, new Id(idleft, idright, id))); RESULT = idInitOpList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= ID ASSIGN Expr 
            {
              LinkedList<IdInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<IdInitOp> idInitOpList = new LinkedList<IdInitOp>(); IdInitOp idInitOp = new IdInitOp(idleft, idright, new Id(idleft,idright,id),expr); idInitOpList.add(idInitOp); RESULT = idInitOpList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              LinkedList<IdInitOp> RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<IdInitOp> idListInit = (LinkedList<IdInitOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 IdInitOp idInitOp = new IdInitOp(idleft, idright, new Id(idleft,idright,id),expr); idListInit.add(idInitOp); RESULT = idListInit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInitObbl ::= ID ASSIGN Const 
            {
              LinkedList<IdInitObblOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<IdInitObblOp> idInitObbList = new LinkedList<IdInitObblOp>(); IdInitObblOp idInitObblOp = new IdInitObblOp(idleft, idright, new Id(idleft,idright, id), c);
                                                                          idInitObbList.add(idInitObblOp); RESULT = idInitObbList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdListInitObbl ::= IdListInitObbl COMMA ID ASSIGN Const 
            {
              LinkedList<IdInitObblOp> RESULT =null;
		int idListObblleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListObblright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<IdInitObblOp> idListObbl = (LinkedList<IdInitObblOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		IdInitObblOp idInitObblOp = new IdInitObblOp(idleft, idright, new Id(idleft, idright, id), c);
	                                                                      idListObbl.add(idInitObblOp); RESULT = idListObbl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Const RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ic = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Const(icleft,icright,new IntegerConst(icleft, icright, ic)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              Const RESULT =null;
		int rcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Const(rcleft,rcright,new RealConst(rcleft,rcright,rc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= BOOL_CONST 
            {
              Const RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Const(bcleft,bcright,new BoolConst(bcleft, bcright, bc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= STRING_CONST 
            {
              Const RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Const(scleft,scright,new StringConst(scleft,scright,sc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
            {
              Fun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		LinkedList<ParDecl> paramDeclList = (LinkedList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Fun(idleft,idright, new Id(idleft, idright, id), paramDeclList, t, varDeclList, statList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Fun",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              Fun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<ParDecl> parDeclList = (LinkedList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Fun(idleft,idright, new Id(idleft,idright,id),parDeclList,varDeclList,statList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Fun",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParamDeclList ::= 
            {
              LinkedList<ParDecl> RESULT =null;
		 RESULT = new LinkedList<ParDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              LinkedList<ParDecl> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ParDecl> lista = (LinkedList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lista ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NonEmptyParamDeclList ::= ParDecl 
            {
              LinkedList<ParDecl> RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDecl parDecl = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<ParDecl> lista = new LinkedList<ParDecl>(); lista.add(parDecl); RESULT = lista;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              LinkedList<ParDecl> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ParDecl> lista = (LinkedList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDecl parDecl = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lista.add(parDecl); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= Type ID 
            {
              ParDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParDecl(tleft,tright,t,new Id(tleft, tright, id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParDecl ::= OUT Type ID 
            {
              ParDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParDecl(tleft,tright, true , t, new Id(tleft,tright, id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StatList ::= 
            {
              LinkedList<Stat> RESULT =null;
		RESULT = new LinkedList<Stat>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= StatList Stat 
            {
              LinkedList<Stat> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Stat> list = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(stat); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= IfStat SEMI 
            {
              Stat RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IfStat ifStat = (IfStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ifStat;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= WhileStat SEMI 
            {
              Stat RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WhileStat whileStat = (WhileStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = whileStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= ReadStat SEMI 
            {
              Stat RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ReadStat readStat = (ReadStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = readStat;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= WriteStat SEMI 
            {
              Stat RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WriteStat writeStat = (WriteStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = writeStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= ForStat 
            {
              Stat RESULT =null;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStat forStat = (ForStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = forStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= AssignStat SEMI 
            {
              Stat RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignStat assignStat = (AssignStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = assignStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= CallFun SEMI 
            {
              Stat RESULT =null;
		int callFunleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int callFunright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CallFunction callFun = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CallFunctionStat(callFunleft, callFunright, callFun); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= RETURN Expr SEMI 
            {
              Stat RESULT =null;
		int ropleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ropright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rop = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ReturnOp(ropleft,ropright,expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              IfStat RESULT =null;
		int ifOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int ifOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String ifOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elseOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elseOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ElseOp elseOp = (ElseOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new IfStat(ifOpleft,ifOpright,expr,varDeclList,statList,elseOp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Else ::= 
            {
              ElseOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= ELSE VarDeclList StatList 
            {
              ElseOp RESULT =null;
		int elseOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elseOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String elseOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseOp(elseOpleft,elseOpright,varDeclList,statList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList END LOOP 
            {
              WhileStat RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WhileStat(wleft, wright, expr, varDeclList, statList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ForStat ::= DOFOR LPAR VarDecl RPAR LBRA StatList RBRA For SEMI 
            {
              ForStat RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		VarDecl varDecl = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		For forStat = (For)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ForStat(varDeclleft, varDeclright, varDecl,  statList, forStat);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // For ::= FOR LPAR Expr SEMI AssignStatList RPAR 
            {
              For RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<AssignStat> assignStat = (LinkedList<AssignStat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new For(exprleft, exprright, expr, assignStat);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("For",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AssignStatList ::= 
            {
              LinkedList<AssignStat> RESULT =null;
		RESULT = new LinkedList<AssignStat>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStatList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AssignStatList ::= AssignStatList AssignStat COMMA 
            {
              LinkedList<AssignStat> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<AssignStat> lista = (LinkedList<AssignStat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignStat assign = (AssignStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		lista.add(assign); RESULT = lista;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStatList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AssignStatList ::= AssignStatList AssignStat 
            {
              LinkedList<AssignStat> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<AssignStat> lista = (LinkedList<AssignStat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssignStat assign = (AssignStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lista.add(assign); RESULT = lista;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStatList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ReadStat ::= READ IdList Expr 
            {
              ReadStat RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Id> idList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReadStat(idListleft,idListright,idList,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ReadStat ::= READ IdList 
            {
              ReadStat RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Id> idList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReadStat(idListleft,idListright,idList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IdList ::= ID 
            {
              LinkedList<Id> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Id idvar = new Id(idleft,idright,id);
                                                LinkedList<Id> idlist = new LinkedList<Id>();
                                                idlist.add(idvar);
                                                RESULT = idlist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IdList ::= IdList COMMA ID 
            {
              LinkedList<Id> RESULT =null;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Id> idlist = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		idlist.add(new Id(idleft,idright,id)); RESULT = idlist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WriteStat ::= WRITE Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WriteOp(exprleft,exprright,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WriteStat ::= WRITELN Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WriteLnOp(exprleft,exprright,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // WriteStat ::= WRITET Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WriteTOp(exprleft,exprright,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WriteStat ::= WRITEB Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WriteBOp(exprleft,exprright,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AssignStat ::= ID ASSIGN Expr 
            {
              AssignStat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStat(idleft,idright, new Id(idleft,idright, id), expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CallFun ::= ID LPAR ExprList RPAR 
            {
              CallFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> exprList = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CallFunction(idleft,idright,new Id(idleft,idright,id),exprList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallFun",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CallFun ::= ID LPAR RPAR 
            {
              CallFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new CallFunction(idleft,idright,new Id(idleft,idright,id), new LinkedList<Expr>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallFun",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExprList ::= Expr 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Expr> exprList = new LinkedList<Expr>();
                                        exprList.add(e);
                                        RESULT = exprList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExprList ::= ExprList COMMA Expr 
            {
              LinkedList<Expr> RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expr> exprList = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 exprList.add(e); RESULT = exprList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExprList ::= OUTPAR ID 
            {
              LinkedList<Expr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Expr> exprList = new LinkedList<Expr>();
	                                    OutParIdExpr outParIdExpr = new OutParIdExpr(idleft,idright, new Id(idleft,idright, id));
	                                    exprList.add(outParIdExpr);
	                                    RESULT = exprList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExprList ::= ExprList COMMA OUTPAR ID 
            {
              LinkedList<Expr> RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Expr> exprList = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 OutParIdExpr outParIdExpr = new OutParIdExpr(idleft,idright, new Id(idleft,idright, id));
	                                            exprList.add(outParIdExpr);
	                                            RESULT=exprList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= BOOL_CONST 
            {
              Expr RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BoolConst(bcleft,bcright,bc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ic = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerConst(icleft,icright,ic); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int rcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RealConst(rcleft,rcright,rc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConst(scleft,scright,sc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Id(idleft,idright,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= CallFun 
            {
              Expr RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallFunction cf = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cf; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TimesOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr DIVINT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivIntOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PowOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConcatOp(e1left,e1right,e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterEqualRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThanRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessEqualRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotEqualRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusExpr(e1left, e1right, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpr(e1left, e1right, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1 ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
