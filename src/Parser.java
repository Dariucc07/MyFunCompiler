
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import syntax.*;
import syntax.statement.*;
import syntax.statement.WriteOps.*;
import syntax.type.*;
import java.util.LinkedList;
import syntax.expr.*;
import syntax.expr.binaryexpr.arithop.*;
import syntax.expr.binaryexpr.relop.*;
import syntax.expr.binaryexpr.stringop.StringConcatOp;
import syntax.expr.unaryexpr.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\010\010\000\002\005\002" +
    "\000\002\005\004\000\002\004\005\000\002\004\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\007\000\002\013\005\000\002\013\007" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\006\016\000\002\006\014\000\002" +
    "\015\002\000\002\015\003\000\002\016\003\000\002\016" +
    "\005\000\002\017\004\000\002\017\005\000\002\020\002" +
    "\000\002\020\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\005\000\002\022\012\000\002\023" +
    "\002\000\002\023\005\000\002\024\012\000\002\025\002" +
    "\000\002\025\005\000\002\026\005\000\002\026\004\000" +
    "\002\012\003\000\002\012\005\000\002\027\004\000\002" +
    "\027\004\000\002\027\004\000\002\027\004\000\002\030" +
    "\005\000\002\031\006\000\002\031\005\000\002\033\003" +
    "\000\002\033\005\000\002\033\004\000\002\033\006\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\004\000\002\034\004" +
    "\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\020\004\uffff\006\uffff\014\uffff\015\uffff\016" +
    "\uffff\017\uffff\020\uffff\001\002\000\004\002\263\001\002" +
    "\000\020\004\ufffc\006\007\014\006\015\013\016\010\017" +
    "\014\020\ufffc\001\002\000\040\005\ufff8\006\ufff8\007\ufff8" +
    "\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8\022" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\001\002" +
    "\000\004\005\246\001\002\000\040\005\ufff5\006\ufff5\007" +
    "\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5" +
    "\022\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\001" +
    "\002\000\004\005\235\001\002\000\050\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\025\ufffe\055\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\061\ufffe\001\002\000\040\005" +
    "\ufff6\006\ufff6\007\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\021\ufff6\022\ufff6\055\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\001\002\000\040\005\ufff7\006\ufff7\007\ufff7" +
    "\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\001\002" +
    "\000\006\004\016\020\021\001\002\000\040\005\uffff\006" +
    "\uffff\007\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\021\uffff\022\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\001\002\000\004\002\001\001\002\000\006\004\ufffb" +
    "\020\ufffb\001\002\000\004\005\022\001\002\000\004\027" +
    "\023\001\002\000\016\014\006\015\013\016\010\017\014" +
    "\024\030\030\uffe8\001\002\000\004\005\227\001\002\000" +
    "\004\030\035\001\002\000\006\030\uffe6\031\uffe6\001\002" +
    "\000\006\030\uffe7\031\033\001\002\000\012\014\006\015" +
    "\013\016\010\017\014\001\002\000\004\005\032\001\002" +
    "\000\006\030\uffe3\031\uffe3\001\002\000\014\014\006\015" +
    "\013\016\010\017\014\024\030\001\002\000\006\030\uffe5" +
    "\031\uffe5\001\002\000\042\005\uffff\006\uffff\007\uffff\012" +
    "\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff\022\uffff" +
    "\033\037\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\001" +
    "\002\000\040\005\uffe2\006\007\007\uffe2\012\uffe2\014\006" +
    "\015\013\016\010\017\014\021\uffe2\022\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002\000\012\014\006" +
    "\015\013\016\010\017\014\001\002\000\040\005\uffff\006" +
    "\uffff\007\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\021\uffff\022\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\001\002\000\040\005\uffe2\006\007\007\uffe2\012\uffe2" +
    "\014\006\015\013\016\010\017\014\021\uffe2\022\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002\000\026" +
    "\005\054\007\052\012\044\021\062\022\060\055\043\056" +
    "\055\057\047\060\063\061\046\001\002\000\004\005\216" +
    "\001\002\000\022\005\074\027\070\045\075\047\064\065" +
    "\067\066\073\067\072\070\065\001\002\000\004\032\203" +
    "\001\002\000\022\005\074\027\070\045\075\047\064\065" +
    "\067\066\073\067\072\070\065\001\002\000\022\005\074" +
    "\027\070\045\075\047\064\065\067\066\073\067\072\070" +
    "\065\001\002\000\004\032\200\001\002\000\004\032\177" +
    "\001\002\000\022\005\074\027\070\045\075\047\064\065" +
    "\067\066\073\067\072\070\065\001\002\000\004\032\164" +
    "\001\002\000\006\027\135\042\162\001\002\000\022\005" +
    "\074\027\070\045\075\047\064\065\067\066\073\067\072" +
    "\070\065\001\002\000\032\005\uffe1\007\uffe1\011\uffe1\012" +
    "\uffe1\021\uffe1\022\uffe1\025\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\001\002\000\004\032\160\001\002\000" +
    "\022\005\074\027\070\045\075\047\064\065\067\066\073" +
    "\067\072\070\065\001\002\000\004\032\155\001\002\000" +
    "\004\020\153\001\002\000\022\005\074\027\070\045\075" +
    "\047\064\065\067\066\073\067\072\070\065\001\002\000" +
    "\022\005\074\027\070\045\075\047\064\065\067\066\073" +
    "\067\072\070\065\001\002\000\052\010\uffc2\013\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\043\uffc2\044\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\001\002\000\042" +
    "\032\uffcc\034\113\035\105\036\104\037\111\040\107\041" +
    "\102\043\077\044\114\046\103\047\100\050\110\051\115" +
    "\052\106\053\101\054\112\001\002\000\052\010\uffc1\013" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\043\uffc1\044\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\001\002" +
    "\000\022\005\074\027\070\045\075\047\064\065\067\066" +
    "\073\067\072\070\065\001\002\000\052\010\uffbf\013\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\001\002\000" +
    "\052\010\uffc4\013\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\001\002\000\052\010\uffc3\013\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\043\uffc3\044\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\001\002\000\054\010\uffc0" +
    "\013\uffc0\027\135\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\043\uffc0\044\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\001\002\000\022\005\074\027\070\045\075\047\064" +
    "\065\067\066\073\067\072\070\065\001\002\000\052\010" +
    "\uffae\013\uffae\030\uffae\031\uffae\032\uffae\034\113\035\105" +
    "\036\104\037\111\040\107\041\102\043\uffae\044\uffae\046" +
    "\103\047\100\050\110\051\115\052\106\053\101\054\112" +
    "\001\002\000\022\005\074\027\070\045\075\047\064\065" +
    "\067\066\073\067\072\070\065\001\002\000\022\005\074" +
    "\027\070\045\075\047\064\065\067\066\073\067\072\070" +
    "\065\001\002\000\022\005\074\027\070\045\075\047\064" +
    "\065\067\066\073\067\072\070\065\001\002\000\022\005" +
    "\074\027\070\045\075\047\064\065\067\066\073\067\072" +
    "\070\065\001\002\000\022\005\074\027\070\045\075\047" +
    "\064\065\067\066\073\067\072\070\065\001\002\000\022" +
    "\005\074\027\070\045\075\047\064\065\067\066\073\067" +
    "\072\070\065\001\002\000\022\005\074\027\070\045\075" +
    "\047\064\065\067\066\073\067\072\070\065\001\002\000" +
    "\022\005\074\027\070\045\075\047\064\065\067\066\073" +
    "\067\072\070\065\001\002\000\022\005\074\027\070\045" +
    "\075\047\064\065\067\066\073\067\072\070\065\001\002" +
    "\000\022\005\074\027\070\045\075\047\064\065\067\066" +
    "\073\067\072\070\065\001\002\000\022\005\074\027\070" +
    "\045\075\047\064\065\067\066\073\067\072\070\065\001" +
    "\002\000\022\005\074\027\070\045\075\047\064\065\067" +
    "\066\073\067\072\070\065\001\002\000\022\005\074\027" +
    "\070\045\075\047\064\065\067\066\073\067\072\070\065" +
    "\001\002\000\022\005\074\027\070\045\075\047\064\065" +
    "\067\066\073\067\072\070\065\001\002\000\022\005\074" +
    "\027\070\045\075\047\064\065\067\066\073\067\072\070" +
    "\065\001\002\000\052\010\uffba\013\uffba\030\uffba\031\uffba" +
    "\032\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\043\uffba\044\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\101\054\uffba\001\002\000\052\010\uffb6\013" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\034\113\035\105\036\104" +
    "\037\111\040\107\041\102\043\077\044\uffb6\046\103\047" +
    "\100\050\110\051\115\052\106\053\101\054\112\001\002" +
    "\000\052\010\uffb3\013\uffb3\030\uffb3\031\uffb3\032\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\043\uffb3" +
    "\044\uffb3\046\103\047\100\050\110\051\115\052\106\053" +
    "\101\054\112\001\002\000\052\010\uffb7\013\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\043\uffb7\044\uffb7\046\103\047\100\050\110" +
    "\051\115\052\106\053\101\054\uffb7\001\002\000\052\010" +
    "\uffb0\013\uffb0\030\uffb0\031\uffb0\032\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0\046" +
    "\103\047\100\050\110\051\115\052\106\053\101\054\112" +
    "\001\002\000\052\010\uffbc\013\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\043\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\101\054\uffbc\001\002\000\052\010\uffb5\013\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5\046\103\047\100" +
    "\050\110\051\115\052\106\053\101\054\112\001\002\000" +
    "\052\010\uffbb\013\uffbb\030\uffbb\031\uffbb\032\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\043\uffbb\044" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\101" +
    "\054\uffbb\001\002\000\052\010\uffb2\013\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\043\uffb2\044\uffb2\046\103\047\100\050\110\051" +
    "\115\052\106\053\101\054\112\001\002\000\052\010\uffb1" +
    "\013\uffb1\030\uffb1\031\uffb1\032\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1\044\uffb1\046\103" +
    "\047\100\050\110\051\115\052\106\053\101\054\112\001" +
    "\002\000\052\010\uffbe\013\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\043" +
    "\uffbe\044\uffbe\046\uffbe\047\uffbe\050\110\051\115\052\106" +
    "\053\101\054\uffbe\001\002\000\052\010\uffb4\013\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\043\uffb4\044\uffb4\046\103\047\100\050" +
    "\110\051\115\052\106\053\101\054\112\001\002\000\052" +
    "\010\uffb8\013\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\044\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\101\054" +
    "\uffb8\001\002\000\052\010\uffbd\013\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\043\uffbd\044\uffbd\046\uffbd\047\uffbd\050\110\051\115" +
    "\052\106\053\101\054\uffbd\001\002\000\052\010\uffb9\013" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\034\113\035\105\036\104" +
    "\037\111\040\107\041\102\043\uffb9\044\uffb9\046\103\047" +
    "\100\050\110\051\115\052\106\053\101\054\112\001\002" +
    "\000\026\005\074\023\137\027\070\030\141\045\075\047" +
    "\064\065\067\066\073\067\072\070\065\001\002\000\044" +
    "\030\uffc8\031\uffc8\034\113\035\105\036\104\037\111\040" +
    "\107\041\102\043\077\044\114\046\103\047\100\050\110" +
    "\051\115\052\106\053\101\054\112\001\002\000\004\005" +
    "\147\001\002\000\006\030\143\031\142\001\002\000\052" +
    "\010\uffc9\013\uffc9\030\uffc9\031\uffc9\032\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\001\002\000\024\005\074\023\145\027\070\045\075" +
    "\047\064\065\067\066\073\067\072\070\065\001\002\000" +
    "\052\010\uffca\013\uffca\030\uffca\031\uffca\032\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\043\uffca\044" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\001\002\000\044\030\uffc7\031\uffc7\034\113\035" +
    "\105\036\104\037\111\040\107\041\102\043\077\044\114" +
    "\046\103\047\100\050\110\051\115\052\106\053\101\054" +
    "\112\001\002\000\004\005\146\001\002\000\006\030\uffc5" +
    "\031\uffc5\001\002\000\006\030\uffc6\031\uffc6\001\002\000" +
    "\042\030\151\034\113\035\105\036\104\037\111\040\107" +
    "\041\102\043\077\044\114\046\103\047\100\050\110\051" +
    "\115\052\106\053\101\054\112\001\002\000\052\010\uffad" +
    "\013\uffad\030\uffad\031\uffad\032\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\043\uffad\044\uffad\046\uffad" +
    "\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\001" +
    "\002\000\052\010\uffaf\013\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\043" +
    "\uffaf\044\uffaf\046\uffaf\047\uffaf\050\110\051\115\052\106" +
    "\053\101\054\uffaf\001\002\000\004\032\154\001\002\000" +
    "\006\004\uffea\020\uffea\001\002\000\032\005\uffde\007\uffde" +
    "\011\uffde\012\uffde\021\uffde\022\uffde\025\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\uffde\001\002\000\042\032\157" +
    "\034\113\035\105\036\104\037\111\040\107\041\102\043" +
    "\077\044\114\046\103\047\100\050\110\051\115\052\106" +
    "\053\101\054\112\001\002\000\032\005\uffda\007\uffda\011" +
    "\uffda\012\uffda\021\uffda\022\uffda\025\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\001\002\000\032\005\uffdd\007" +
    "\uffdd\011\uffdd\012\uffdd\021\uffdd\022\uffdd\025\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\001\002\000\042\032" +
    "\uffcf\034\113\035\105\036\104\037\111\040\107\041\102" +
    "\043\077\044\114\046\103\047\100\050\110\051\115\052" +
    "\106\053\101\054\112\001\002\000\022\005\074\027\070" +
    "\045\075\047\064\065\067\066\073\067\072\070\065\001" +
    "\002\000\042\032\uffcb\034\113\035\105\036\104\037\111" +
    "\040\107\041\102\043\077\044\114\046\103\047\100\050" +
    "\110\051\115\052\106\053\101\054\112\001\002\000\032" +
    "\005\uffdc\007\uffdc\011\uffdc\012\uffdc\021\uffdc\022\uffdc\025" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\001\002" +
    "\000\042\010\166\034\113\035\105\036\104\037\111\040" +
    "\107\041\102\043\077\044\114\046\103\047\100\050\110" +
    "\051\115\052\106\053\101\054\112\001\002\000\042\005" +
    "\uffff\006\uffff\007\uffff\011\uffff\012\uffff\014\uffff\015\uffff" +
    "\016\uffff\017\uffff\021\uffff\022\uffff\055\uffff\056\uffff\057" +
    "\uffff\060\uffff\061\uffff\001\002\000\042\005\uffe2\006\007" +
    "\007\uffe2\011\uffe2\012\uffe2\014\006\015\013\016\010\017" +
    "\014\021\uffe2\022\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2" +
    "\061\uffe2\001\002\000\030\005\054\007\052\011\172\012" +
    "\044\021\uffd8\022\060\055\043\056\055\057\047\060\063" +
    "\061\046\001\002\000\004\021\175\001\002\000\040\005" +
    "\uffff\006\uffff\007\uffff\012\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\021\uffff\022\uffff\055\uffff\056\uffff\057\uffff\060" +
    "\uffff\061\uffff\001\002\000\040\005\uffe2\006\007\007\uffe2" +
    "\012\uffe2\014\006\015\013\016\010\017\014\021\uffe2\022" +
    "\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002" +
    "\000\026\005\054\007\052\012\044\021\uffd7\022\060\055" +
    "\043\056\055\057\047\060\063\061\046\001\002\000\004" +
    "\007\176\001\002\000\004\032\uffd9\001\002\000\032\005" +
    "\uffe0\007\uffe0\011\uffe0\012\uffe0\021\uffe0\022\uffe0\025\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\001\002\000" +
    "\032\005\uffdb\007\uffdb\011\uffdb\012\uffdb\021\uffdb\022\uffdb" +
    "\025\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\001" +
    "\002\000\042\032\uffce\034\113\035\105\036\104\037\111" +
    "\040\107\041\102\043\077\044\114\046\103\047\100\050" +
    "\110\051\115\052\106\053\101\054\112\001\002\000\042" +
    "\032\uffcd\034\113\035\105\036\104\037\111\040\107\041" +
    "\102\043\077\044\114\046\103\047\100\050\110\051\115" +
    "\052\106\053\101\054\112\001\002\000\032\005\uffdf\007" +
    "\uffdf\011\uffdf\012\uffdf\021\uffdf\022\uffdf\025\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\001\002\000\042\013" +
    "\205\034\113\035\105\036\104\037\111\040\107\041\102" +
    "\043\077\044\114\046\103\047\100\050\110\051\115\052" +
    "\106\053\101\054\112\001\002\000\042\005\uffff\006\uffff" +
    "\007\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021" +
    "\uffff\022\uffff\025\uffff\055\uffff\056\uffff\057\uffff\060\uffff" +
    "\061\uffff\001\002\000\042\005\uffe2\006\007\007\uffe2\012" +
    "\uffe2\014\006\015\013\016\010\017\014\021\uffe2\022\uffe2" +
    "\025\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\001" +
    "\002\000\030\005\054\007\052\012\044\021\uffd5\022\060" +
    "\025\211\055\043\056\055\057\047\060\063\061\046\001" +
    "\002\000\004\021\214\001\002\000\040\005\uffff\006\uffff" +
    "\007\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021" +
    "\uffff\022\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff" +
    "\001\002\000\040\005\uffe2\006\007\007\uffe2\012\uffe2\014" +
    "\006\015\013\016\010\017\014\021\uffe2\022\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002\000\026\005" +
    "\054\007\052\012\044\021\uffd4\022\060\055\043\056\055" +
    "\057\047\060\063\061\046\001\002\000\004\013\215\001" +
    "\002\000\004\032\uffd6\001\002\000\026\005\uffd1\027\uffd1" +
    "\031\uffd1\032\uffd1\045\uffd1\047\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\070\uffd1\001\002\000\026\005\074\027\070\031\221" +
    "\032\uffd2\045\075\047\064\065\067\066\073\067\072\070" +
    "\065\001\002\000\042\032\uffd3\034\113\035\105\036\104" +
    "\037\111\040\107\041\102\043\077\044\114\046\103\047" +
    "\100\050\110\051\115\052\106\053\101\054\112\001\002" +
    "\000\004\005\222\001\002\000\026\005\uffd0\027\uffd0\031" +
    "\uffd0\032\uffd0\045\uffd0\047\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\070\uffd0\001\002\000\026\005\054\007\052\012\044\021" +
    "\224\022\060\055\043\056\055\057\047\060\063\061\046" +
    "\001\002\000\004\020\225\001\002\000\004\032\226\001" +
    "\002\000\006\004\uffe9\020\uffe9\001\002\000\006\030\uffe4" +
    "\031\uffe4\001\002\000\040\005\uffe2\006\007\007\uffe2\012" +
    "\uffe2\014\006\015\013\016\010\017\014\021\uffe2\022\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002\000" +
    "\026\005\054\007\052\012\044\021\232\022\060\055\043" +
    "\056\055\057\047\060\063\061\046\001\002\000\004\004" +
    "\233\001\002\000\004\032\234\001\002\000\004\002\ufffd" +
    "\001\002\000\010\031\ufff4\032\ufff4\042\244\001\002\000" +
    "\006\031\237\032\240\001\002\000\004\005\241\001\002" +
    "\000\050\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\025\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061" +
    "\ufffa\001\002\000\010\031\ufff3\032\ufff3\042\242\001\002" +
    "\000\022\005\074\027\070\045\075\047\064\065\067\066" +
    "\073\067\072\070\065\001\002\000\044\031\ufff1\032\ufff1" +
    "\034\113\035\105\036\104\037\111\040\107\041\102\043" +
    "\077\044\114\046\103\047\100\050\110\051\115\052\106" +
    "\053\101\054\112\001\002\000\022\005\074\027\070\045" +
    "\075\047\064\065\067\066\073\067\072\070\065\001\002" +
    "\000\044\031\ufff2\032\ufff2\034\113\035\105\036\104\037" +
    "\111\040\107\041\102\043\077\044\114\046\103\047\100" +
    "\050\110\051\115\052\106\053\101\054\112\001\002\000" +
    "\004\042\261\001\002\000\006\031\250\032\251\001\002" +
    "\000\004\005\252\001\002\000\050\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\025\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\001\002\000\004\042\253" +
    "\001\002\000\012\065\254\066\255\067\256\070\257\001" +
    "\002\000\006\031\uffeb\032\uffeb\001\002\000\006\031\uffee" +
    "\032\uffee\001\002\000\006\031\uffec\032\uffec\001\002\000" +
    "\006\031\uffed\032\uffed\001\002\000\006\031\uffef\032\uffef" +
    "\001\002\000\012\065\254\066\255\067\256\070\257\001" +
    "\002\000\006\031\ufff0\032\ufff0\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\004\011\005\014\007\010\001\001\000\002" +
    "\001\001\000\004\013\246\001\001\000\002\001\001\000" +
    "\004\011\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\017\010\016\001\001\000" +
    "\004\003\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\023\015" +
    "\024\016\026\017\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\023\017\033\001\001\000\002\001\001\000\004\003" +
    "\035\001\001\000\010\004\011\007\010\020\222\001\001" +
    "\000\004\007\037\001\001\000\004\003\040\001\001\000" +
    "\010\004\011\007\010\020\041\001\001\000\020\021\055" +
    "\022\050\024\044\026\060\027\056\030\052\031\047\001" +
    "\001\000\004\012\216\001\001\000\006\031\070\034\203" +
    "\001\001\000\002\001\001\000\006\031\070\034\201\001" +
    "\001\000\006\031\070\034\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\070\034\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\070\034\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\070\034\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\070\034\065\001\001\000\006\031\070\034" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\070\034\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\070\034\075\001\001\000\002\001\001\000" +
    "\006\031\070\034\133\001\001\000\006\031\070\034\132" +
    "\001\001\000\006\031\070\034\131\001\001\000\006\031" +
    "\070\034\130\001\001\000\006\031\070\034\127\001\001" +
    "\000\006\031\070\034\126\001\001\000\006\031\070\034" +
    "\125\001\001\000\006\031\070\034\124\001\001\000\006" +
    "\031\070\034\123\001\001\000\006\031\070\034\122\001" +
    "\001\000\006\031\070\034\121\001\001\000\006\031\070" +
    "\034\120\001\001\000\006\031\070\034\117\001\001\000" +
    "\006\031\070\034\116\001\001\000\006\031\070\034\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\070\033\137\034\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\070\034\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\070\034\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\166\001\001" +
    "\000\010\004\011\007\010\020\167\001\001\000\022\021" +
    "\055\022\050\023\170\024\044\026\060\027\056\030\052" +
    "\031\047\001\001\000\002\001\001\000\004\003\172\001" +
    "\001\000\010\004\011\007\010\020\173\001\001\000\020" +
    "\021\055\022\050\024\044\026\060\027\056\030\052\031" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\205" +
    "\001\001\000\010\004\011\007\010\020\206\001\001\000" +
    "\022\021\055\022\050\024\044\025\207\026\060\027\056" +
    "\030\052\031\047\001\001\000\002\001\001\000\004\003" +
    "\211\001\001\000\010\004\011\007\010\020\212\001\001" +
    "\000\020\021\055\022\050\024\044\026\060\027\056\030" +
    "\052\031\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\070\034\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\021\055\022\050\024\044\026\060\027\056\030\052\031" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\011\007\010\020" +
    "\230\001\001\000\020\021\055\022\050\024\044\026\060" +
    "\027\056\030\052\031\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\070\034\242\001\001\000\002\001\001" +
    "\000\006\031\070\034\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\261\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void report_error(String msg, Object info) {
  Symbol sym = (Symbol)info;
  System.out.println(msg + ": " + symbl_name_from_id(sym.sym));
}

public void syntax_error(Symbol cur_token) {
  System.out.println("Syntax error: " + symbl_name_from_id(cur_token.sym));
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              Program RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Fun> funList = (LinkedList<Fun>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Program(varDeclListleft, varDeclListright, varDeclList, funList, main); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		RESULT = new LinkedList<VarDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDeclList VarDecl 
            {
              LinkedList<VarDecl> RESULT =null;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDecl> parDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl parDecl = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parDeclList.add(parDecl); RESULT = parDeclList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              Main RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new Main(mleft, mright,  varDeclList, statList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= 
            {
              LinkedList<Fun> RESULT =null;
		RESULT = new LinkedList<Fun>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= FunList Fun 
            {
              LinkedList<Fun> RESULT =null;
		int flistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Fun> flist = (LinkedList<Fun>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Fun f = (Fun)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		flist.add(f); RESULT = flist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<IdInitOp> idListInit = (LinkedList<IdInitOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarDecl(tleft, tright, t, idListInit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              VarDecl RESULT =null;
		int idListInitObblleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListInitObblright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<IdInitObblOp> idListInitObbl = (LinkedList<IdInitObblOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarDecl(idListInitObblleft,idListInitObblright,true,idListInitObbl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INTEGER 
            {
              Type RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(itleft,itright,"INTEGER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              Type RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(btleft,btright,"BOOL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= REAL 
            {
              Type RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(rtleft,rtright,"REAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(stleft,stright,"STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID 
            {
              LinkedList<IdInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<IdInitOp> idInitOpList = new LinkedList<IdInitOp>(); idInitOpList.add(new IdInitOp(idleft,idright, new Id(idleft, idright, id))); RESULT = idInitOpList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID 
            {
              LinkedList<IdInitOp> RESULT =null;
		int idInitOpListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idInitOpListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<IdInitOp> idInitOpList = (LinkedList<IdInitOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		idInitOpList.add(new IdInitOp(idleft,idright, new Id(idleft, idright, id))); RESULT = idInitOpList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= ID ASSIGN Expr 
            {
              LinkedList<IdInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<IdInitOp> idInitOpList = new LinkedList<IdInitOp>(); IdInitOp idInitOp = new IdInitOp(idleft, idright, new Id(idleft,idright,id),expr); idInitOpList.add(idInitOp); RESULT = idInitOpList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              LinkedList<IdInitOp> RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<IdInitOp> idListInit = (LinkedList<IdInitOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 IdInitOp idInitOp = new IdInitOp(idleft, idright, new Id(idleft,idright,id),expr); idListInit.add(idInitOp); RESULT = idListInit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInitObbl ::= ID ASSIGN Const 
            {
              LinkedList<IdInitObblOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<IdInitObblOp> idInitObbList = new LinkedList<IdInitObblOp>(); IdInitObblOp idInitObblOp = new IdInitObblOp(idleft, idright, new Id(idleft,idright, id), c);
                                                                          idInitObbList.add(idInitObblOp); RESULT = idInitObbList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdListInitObbl ::= IdListInitObbl COMMA ID ASSIGN Const 
            {
              LinkedList<IdInitObblOp> RESULT =null;
		int idListObblleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListObblright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<IdInitObblOp> idListObbl = (LinkedList<IdInitObblOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		IdInitObblOp idInitObblOp = new IdInitObblOp(idleft, idright, new Id(idleft, idright, id), c);
	                                                                      idListObbl.add(idInitObblOp); RESULT = idListObbl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Const RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ic = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Const(icleft,icright,new IntegerConst(icleft, icright, ic)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              Const RESULT =null;
		int rcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Const(rcleft,rcright,new RealConst(rcleft,rcright,rc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= BOOL_CONST 
            {
              Const RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Const(bcleft,bcright,new BoolConst(bcleft, bcright, bc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= STRING_CONST 
            {
              Const RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Const(scleft,scright,new StringConst(scleft,scright,sc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
            {
              Fun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		LinkedList<ParDecl> paramDeclList = (LinkedList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Fun(idleft,idright, new Id(idleft, idright, id), paramDeclList, t, varDeclList, statList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Fun",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              Fun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<ParDecl> parDeclList = (LinkedList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Fun(idleft,idright, new Id(idleft,idright,id),parDeclList,varDeclList,statList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Fun",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParamDeclList ::= 
            {
              LinkedList<ParDecl> RESULT =null;
		 RESULT = new LinkedList<ParDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              LinkedList<ParDecl> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ParDecl> lista = (LinkedList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lista ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NonEmptyParamDeclList ::= ParDecl 
            {
              LinkedList<ParDecl> RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDecl parDecl = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<ParDecl> lista = new LinkedList<ParDecl>(); lista.add(parDecl); RESULT = lista;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              LinkedList<ParDecl> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ParDecl> lista = (LinkedList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDecl parDecl = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lista.add(parDecl); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= Type ID 
            {
              ParDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParDecl(tleft,tright,t,new Id(tleft, tright, id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParDecl ::= OUT Type ID 
            {
              ParDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParDecl(tleft,tright, true , t, new Id(tleft,tright, id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StatList ::= 
            {
              LinkedList<Stat> RESULT =null;
		RESULT = new LinkedList<Stat>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= StatList Stat 
            {
              LinkedList<Stat> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Stat> list = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(stat); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= IfStat SEMI 
            {
              Stat RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IfStat ifStat = (IfStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ifStat;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= WhileStat SEMI 
            {
              Stat RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WhileStat whileStat = (WhileStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = whileStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= ReadStat SEMI 
            {
              Stat RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ReadStat readStat = (ReadStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = readStat;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= WriteStat SEMI 
            {
              Stat RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WriteStat writeStat = (WriteStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = writeStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= AssignStat SEMI 
            {
              Stat RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignStat assignStat = (AssignStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = assignStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= CallFun SEMI 
            {
              Stat RESULT =null;
		int callFunleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int callFunright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CallFunction callFun = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CallFunctionStat(callFunleft, callFunright, callFun); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= RETURN Expr SEMI 
            {
              Stat RESULT =null;
		int ropleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ropright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rop = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ReturnOp(ropleft,ropright,expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              IfStat RESULT =null;
		int ifOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int ifOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String ifOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elseOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elseOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ElseOp elseOp = (ElseOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new IfStat(ifOpleft,ifOpright,expr,varDeclList,statList,elseOp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Else ::= 
            {
              ElseOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Else ::= ELSE VarDeclList StatList 
            {
              ElseOp RESULT =null;
		int elseOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elseOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String elseOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseOp(elseOpleft,elseOpright,varDeclList,statList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList ElseLoop END LOOP 
            {
              WhileStat RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elseLoopOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elseLoopOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ElseLoopOp elseLoopOp = (ElseLoopOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WhileStat(wleft, wright, expr, varDeclList, statList, elseLoopOp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ElseLoop ::= 
            {
              ElseLoopOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseLoop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ElseLoop ::= ELSELOOP VarDeclList StatList 
            {
              ElseLoopOp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDecl> varDeclList = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Stat> statList = (LinkedList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseLoopOp(elleft, elright, varDeclList, statList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseLoop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReadStat ::= READ IdList Expr 
            {
              ReadStat RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Id> idList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReadStat(idListleft,idListright,idList,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ReadStat ::= READ IdList 
            {
              ReadStat RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Id> idList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReadStat(idListleft,idListright,idList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IdList ::= ID 
            {
              LinkedList<Id> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Id idvar = new Id(idleft,idright,id);
                                                LinkedList<Id> idlist = new LinkedList<Id>();
                                                idlist.add(idvar);
                                                RESULT = idlist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IdList ::= IdList COMMA ID 
            {
              LinkedList<Id> RESULT =null;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Id> idlist = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		idlist.add(new Id(idleft,idright,id)); RESULT = idlist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WriteStat ::= WRITE Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WriteOp(exprleft,exprright,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WriteStat ::= WRITELN Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WriteLnOp(exprleft,exprright,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WriteStat ::= WRITET Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WriteTOp(exprleft,exprright,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WriteStat ::= WRITEB Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WriteBOp(exprleft,exprright,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AssignStat ::= ID ASSIGN Expr 
            {
              AssignStat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStat(idleft,idright, new Id(idleft,idright, id), expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CallFun ::= ID LPAR ExprList RPAR 
            {
              CallFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> exprList = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CallFunction(idleft,idright,new Id(idleft,idright,id),exprList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallFun",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CallFun ::= ID LPAR RPAR 
            {
              CallFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new CallFunction(idleft,idright,new Id(idleft,idright,id), new LinkedList<Expr>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallFun",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExprList ::= Expr 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Expr> exprList = new LinkedList<Expr>();
                                        exprList.add(e);
                                        RESULT = exprList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExprList ::= ExprList COMMA Expr 
            {
              LinkedList<Expr> RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expr> exprList = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 exprList.add(e); RESULT = exprList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprList ::= OUTPAR ID 
            {
              LinkedList<Expr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Expr> exprList = new LinkedList<Expr>();
	                                    OutParIdExpr outParIdExpr = new OutParIdExpr(idleft,idright, new Id(idleft,idright, id));
	                                    exprList.add(outParIdExpr);
	                                    RESULT = exprList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExprList ::= ExprList COMMA OUTPAR ID 
            {
              LinkedList<Expr> RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Expr> exprList = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 OutParIdExpr outParIdExpr = new OutParIdExpr(idleft,idright, new Id(idleft,idright, id));
	                                            exprList.add(outParIdExpr);
	                                            RESULT=exprList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= BOOL_CONST 
            {
              Expr RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BoolConst(bcleft,bcright,bc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ic = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerConst(icleft,icright,ic); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int rcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RealConst(rcleft,rcright,rc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConst(scleft,scright,sc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Id(idleft,idright,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= CallFun 
            {
              Expr RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallFunction cf = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cf; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TimesOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr DIVINT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivIntOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PowOp(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConcatOp(e1left,e1right,e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterEqualRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThanRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessEqualRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotEqualRelop(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusExpr(e1left, e1right, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpr(e1left, e1right, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1 ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
